mvnormtest::mshapiro.test(t(as.matrix(datos)))      # Shapiro multivariado
# Outliers por Mahalanobis
d2  <- mahalanobis(datos, colMeans(datos), cov(datos))
cut <- qchisq(0.975, df = ncol(datos))
which(d2 > cut)  # posibles atípicos
p    <- ncol(datos)
xbar <- colMeans(datos)
Z2   <- as.numeric(n * t(xbar - mu0) %*% solve(Sigma_known) %*% (xbar - mu0))
pval <- 1 - pchisq(Z2, df = p)
crit <- qchisq(0.95, df = p)
cat("\n=== RESULTADOS Z^2 (Σ conocida) ===\n")
cat("n =", n, " | p =", p, "\n")
cat("xbar =", paste(round(xbar, 3), collapse = ", "), "\n")
cat("Z^2  =", round(Z2, 4), " | gl =", p, " | p-valor =", signif(pval, 6), "\n")
cat("Chi^2 crítico (", p, ", 0.95) =", round(crit, 4), "\n", sep = "")
cat("Decisión: ", ifelse(Z2 > crit, "Rechazar H0", "No rechazar H0"), "\n")
cat("d_M (Mahalanobis de medias) =", round(sqrt(Z2/n), 4), "\n")
knitr::kable(Sigma_known, digits = 3, caption = "Matriz de varianzas-covarianzas (Σ) conocida.")
# Repos confiable
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Lista de paquetes necesarios
packs <- c(
"ggplot2","tidyverse","MASS","Matrix","GGally",
"summarytools","nortest","mvnormtest","knitr"
)
# Carga TODO (y de paso asegura ggplot2)
invisible(lapply(packs, library, character.only = TRUE))
## === P1: Pisco; Σ conocida y prueba Z^2 ===
set.seed(123)
## 1) Parámetros del modelo "conocidos" (bajo H0)
# Vector de medias objetivo
mu0 <- c(50, 90, 180, 140, 1.20)
names(mu0) <- c("alcohol_pct","metanol_mgL","alcoholes_sup_mgL","esteres_mgL","acidez_gL")
# Desv. estándar y matriz de correlación "diseñadas"
sd <- c(1.0, 25, 70, 40, 0.35)   # alcohol %, metanol, alcoholes sup., ésteres, acidez
R  <- matrix(c(
1.00, -0.10,  0.20,  0.25, -0.15,
-0.10,  1.00,  0.05, -0.10,  0.30,
0.20,  0.05,  1.00,  0.45,  0.10,
0.25, -0.10,  0.45,  1.00,  0.05,
-0.15,  0.30,  0.10,  0.05,  1.00
), nrow=5, byrow=TRUE)
# Garantizar definidad positiva
if (any(eigen(R, symmetric=TRUE)$values <= 0)) {
R <- as.matrix(Matrix::nearPD(R)$mat)
}
D <- diag(sd)
Sigma_known <- D %*% R %*% D  # MATRIZ VAR-COV CONOCIDA
## 2) Simulación de datos
n <- 60            # muestras/lotes
# Opción A: NO rechazar H0 (simulamos en mu0)
mu_true <- mu0
# Opción B: PROBABLEMENTE rechazar H0 (descomenta y ajusta)
# mu_true <- mu0 + c(0.6, 10, 20, 15, 0.10)
datos <- as.data.frame(MASS::mvrnorm(n, mu=mu_true, Sigma=Sigma_known))
names(datos) <- names(mu0)
dict <- tibble::tibble(
variable    = names(mu0),
descripcion = c("Alcohol (% v/v a 20°C)",
"Metanol (mg/L)",
"Alcoholes superiores totales (mg/L)",
"Ésteres totales (mg/L)",
"Acidez total (g/L como ácido acético)"),
unidad      = c("% v/v","mg/L","mg/L","mg/L","g/L"),
mu0         = mu0
)
knitr::kable(dict, caption = "Diccionario de variables y μ0 (objetivo).")
summary(datos)
summarytools::descr(datos)
# Matriz de dispersión
GGally::ggpairs(datos, title = "Matriz de dispersión - Pisco")
# Histogramas
datos |>
pivot_longer(everything(), names_to = "variable", values_to = "valor") |>
ggplot(aes(valor)) +
geom_histogram(bins = 20) +
facet_wrap(~variable, scales = "free") +
labs(title = "Histogramas por variable")
# Normalidad univariada
apply(datos, 2, shapiro.test)                       # Shapiro univariado
apply(datos, 2, function(x) nortest::lillie.test(x))# Lilliefors
# Normalidad multivariada
mvnormtest::mshapiro.test(t(as.matrix(datos)))      # Shapiro multivariado
# Outliers por Mahalanobis
d2  <- mahalanobis(datos, colMeans(datos), cov(datos))
cut <- qchisq(0.975, df = ncol(datos))
which(d2 > cut)  # posibles atípicos
p    <- ncol(datos)
xbar <- colMeans(datos)
Z2   <- as.numeric(n * t(xbar - mu0) %*% solve(Sigma_known) %*% (xbar - mu0))
pval <- 1 - pchisq(Z2, df = p)
crit <- qchisq(0.95, df = p)
cat("\n=== RESULTADOS Z^2 (Σ conocida) ===\n")
cat("n =", n, " | p =", p, "\n")
cat("xbar =", paste(round(xbar, 3), collapse = ", "), "\n")
cat("Z^2  =", round(Z2, 4), " | gl =", p, " | p-valor =", signif(pval, 6), "\n")
cat("Chi^2 crítico (", p, ", 0.95) =", round(crit, 4), "\n", sep = "")
cat("Decisión: ", ifelse(Z2 > crit, "Rechazar H0", "No rechazar H0"), "\n")
cat("d_M (Mahalanobis de medias) =", round(sqrt(Z2/n), 4), "\n")
knitr::kable(Sigma_known, digits = 3, caption = "Matriz de varianzas-covarianzas (Σ) conocida.")
suppressPackageStartupMessages({
library(MASS)          # mvrnorm
library(summarytools)  # descr
library(nortest)       # lillie.test
library(mvnormtest)    # mshapiro.test
# library(BSDA)
})
options(digits = 4)
set.seed(123)
# Vector objetivo (bajo H0)
mu0 <- c(40, 80, 200, 160, 1.20)
names(mu0) <- c("alcohol_pct","metanol_mgL","alcoholes_sup_mgL","esteres_mgL","acidez_gL")
# Desv. estándar y correlaciones
sd <- c(1.0, 35, 80, 60, 0.35)
R  <- matrix(c(
1.00, -0.10,  0.20,  0.25, -0.15,
-0.10,  1.00,  0.05, -0.10,  0.30,
0.20,  0.05,  1.00,  0.45,  0.10,
0.25, -0.10,  0.45,  1.00,  0.05,
-0.15,  0.30,  0.10,  0.05,  1.00
), nrow=5, byrow=TRUE)
D <- diag(sd)
Sigma_known <- D %*% R %*% D   # Σ conocida
# Muestra simulada
n <- 70
mu_true <- mu0         # para NO forzar rechazo
datos <- as.data.frame(MASS::mvrnorm(n, mu=mu_true, Sigma=Sigma_known))
names(datos) <- names(mu0)
head(datos)
summary(datos)
summarytools::descr(datos)
# Matriz de dispersión base
pairs(datos, main = "Matriz de dispersión (pares)")
# Histogramas base
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
hist(datos[[j]], main = paste("Hist:", names(datos)[j]), xlab = names(datos)[j], col="gray")
}
par(op)
library(corrplot)
# Boxplots para cada variable
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
boxplot(datos[[j]], main=paste("Boxplot:", names(datos)[j]), col="lightblue")
}
par(op)
# Matriz de correlaciones (visual)
corrplot(cor(datos), method = "ellipse", tl.cex = 0.8)
# Curvas de densidad
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
plot(density(datos[[j]]), main=paste("Densidad:", names(datos)[j]), col="blue", lwd=2)
}
par(op)
# Univariado (Shapiro) y Lilliefors (nortest)
ap_shapiro <- apply(datos, 2, shapiro.test)
ap_lillie  <- apply(datos, 2, function(x) nortest::lillie.test(x))
# Mostrar p-valores de forma compacta
cat("Shapiro univariado (p-valores):\n")
print(sapply(ap_shapiro, `[[`, "p.value"))
cat("\nLilliefors univariado (p-valores):\n")
print(sapply(ap_lillie, `[[`, "p.value"))
# Multivariado (mshapiro)
p_mvn <- tryCatch(mvnormtest::mshapiro.test(t(as.matrix(datos)))$p.value, error=function(e) NA_real_)
cat("\nShapiro multivariado p-value:", p_mvn, "\n")
# Outliers por Mahalanobis (97.5%)
d2  <- mahalanobis(datos, colMeans(datos), cov(datos))
cut <- qchisq(0.975, df = ncol(datos))
idx_out <- which(d2 > cut)
cat("\nÍndices potencialmente atípicos:", ifelse(length(idx_out)==0,"(ninguno)", paste(idx_out, collapse=", ")), "\n")
plot(d2, main="Distancias de Mahalanobis", ylab="d²", pch=19)
abline(h=cut, col="red", lwd=2, lty=2)
text(idx_out, d2[idx_out], labels=idx_out, pos=3, col="red")
# Parámetros
p <- ncol(datos)                       # número de variables
mu <- mu0                              # vector de medias bajo H0
sigma <- Sigma_known                   # matriz Σ conocida
# Media muestral
media_muestral <- colMeans(datos)
# Estadístico Z^2 (equivalente a n*(xbar-mu)' Σ^{-1} (xbar-mu))
Z2 <- t(media_muestral - mu) %*% solve(sigma / n) %*% (media_muestral - mu)
# p-valor (chi-cuadrado con p g.l.)
p_valor <- 1 - pchisq(Z2, df = p)
# Resultados y decisión (α=0.05)
cat("\nEstadística Z^2:", as.numeric(Z2), "\n")
cat("p-valor:", as.numeric(p_valor), "\n")
if (p_valor < 0.05) {
cat("Decisión: Rechazar H0 (el vector de medias difiere de μ0).\n")
} else {
cat("Decisión: No se rechaza H0 (no hay evidencia suficiente de diferencia).\n")
}
# Tamaño de efecto (distancia de Mahalanobis de medias)
d_M <- sqrt(as.numeric(Z2) / n)
cat("d_M (Mahalanobis de la media) =", round(d_M, 4), "\n")
resultados <- data.frame(
Estadistico_Z2 = round(as.numeric(Z2), 4),
gl = p,
p_valor = round(as.numeric(p_valor), 4),
Decision = ifelse(p_valor < 0.05, "Rechazar H0", "No Rechazar H0"),
d_Mahalanobis = round(d_M, 4)
)
knitr::kable(resultados, caption = "Resultados de la prueba Z² con Σ conocida")
suppressPackageStartupMessages({
library(MASS)          # mvrnorm
library(summarytools)  # descr
library(nortest)       # lillie.test
library(mvnormtest)    # mshapiro.test
# library(BSDA)
})
options(digits = 4)
set.seed(123)
# Vector objetivo (bajo H0)
mu0 <- c(50, 80, 200, 160, 1.20)
names(mu0) <- c("alcohol_pct","metanol_mgL","alcoholes_sup_mgL","esteres_mgL","acidez_gL")
# Desv. estándar y correlaciones
sd <- c(1.0, 35, 80, 50, 0.35)
R  <- matrix(c(
1.00, -0.10,  0.20,  0.25, -0.15,
-0.10,  1.00,  0.05, -0.10,  0.30,
0.20,  0.05,  1.00,  0.45,  0.10,
0.25, -0.10,  0.45,  1.00,  0.05,
-0.15,  0.30,  0.10,  0.05,  1.00
), nrow=5, byrow=TRUE)
D <- diag(sd)
Sigma_known <- D %*% R %*% D   # Σ conocida
# Muestra simulada
n <- 70
mu_true <- mu0         # para NO forzar rechazo
datos <- as.data.frame(MASS::mvrnorm(n, mu=mu_true, Sigma=Sigma_known))
names(datos) <- names(mu0)
head(datos)
summary(datos)
summarytools::descr(datos)
# Matriz de dispersión base
pairs(datos, main = "Matriz de dispersión (pares)")
# Histogramas base
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
hist(datos[[j]], main = paste("Hist:", names(datos)[j]), xlab = names(datos)[j], col="gray")
}
par(op)
library(corrplot)
# Boxplots para cada variable
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
boxplot(datos[[j]], main=paste("Boxplot:", names(datos)[j]), col="lightblue")
}
par(op)
# Matriz de correlaciones (visual)
corrplot(cor(datos), method = "ellipse", tl.cex = 0.8)
# Curvas de densidad
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
plot(density(datos[[j]]), main=paste("Densidad:", names(datos)[j]), col="blue", lwd=2)
}
par(op)
# Univariado (Shapiro) y Lilliefors (nortest)
ap_shapiro <- apply(datos, 2, shapiro.test)
ap_lillie  <- apply(datos, 2, function(x) nortest::lillie.test(x))
# Mostrar p-valores de forma compacta
cat("Shapiro univariado (p-valores):\n")
print(sapply(ap_shapiro, `[[`, "p.value"))
cat("\nLilliefors univariado (p-valores):\n")
print(sapply(ap_lillie, `[[`, "p.value"))
# Multivariado (mshapiro)
p_mvn <- tryCatch(mvnormtest::mshapiro.test(t(as.matrix(datos)))$p.value, error=function(e) NA_real_)
cat("\nShapiro multivariado p-value:", p_mvn, "\n")
# Outliers por Mahalanobis (97.5%)
d2  <- mahalanobis(datos, colMeans(datos), cov(datos))
cut <- qchisq(0.975, df = ncol(datos))
idx_out <- which(d2 > cut)
cat("\nÍndices potencialmente atípicos:", ifelse(length(idx_out)==0,"(ninguno)", paste(idx_out, collapse=", ")), "\n")
plot(d2, main="Distancias de Mahalanobis", ylab="d²", pch=19)
abline(h=cut, col="red", lwd=2, lty=2)
text(idx_out, d2[idx_out], labels=idx_out, pos=3, col="red")
# Parámetros
p <- ncol(datos)                       # número de variables
mu <- mu0                              # vector de medias bajo H0
sigma <- Sigma_known                   # matriz Σ conocida
# Media muestral
media_muestral <- colMeans(datos)
# Estadístico Z^2 (equivalente a n*(xbar-mu)' Σ^{-1} (xbar-mu))
Z2 <- t(media_muestral - mu) %*% solve(sigma / n) %*% (media_muestral - mu)
# p-valor (chi-cuadrado con p g.l.)
p_valor <- 1 - pchisq(Z2, df = p)
# Resultados y decisión (α=0.05)
cat("\nEstadística Z^2:", as.numeric(Z2), "\n")
cat("p-valor:", as.numeric(p_valor), "\n")
if (p_valor < 0.05) {
cat("Decisión: Rechazar H0 (el vector de medias difiere de μ0).\n")
} else {
cat("Decisión: No se rechaza H0 (no hay evidencia suficiente de diferencia).\n")
}
# Tamaño de efecto (distancia de Mahalanobis de medias)
d_M <- sqrt(as.numeric(Z2) / n)
cat("d_M (Mahalanobis de la media) =", round(d_M, 4), "\n")
resultados <- data.frame(
Estadistico_Z2 = round(as.numeric(Z2), 4),
gl = p,
p_valor = round(as.numeric(p_valor), 4),
Decision = ifelse(p_valor < 0.05, "Rechazar H0", "No Rechazar H0"),
d_Mahalanobis = round(d_M, 4)
)
knitr::kable(resultados, caption = "Resultados de la prueba Z² con Σ conocida")
suppressPackageStartupMessages({
library(MASS)          # mvrnorm
library(summarytools)  # descr
library(nortest)       # lillie.test
library(mvnormtest)    # mshapiro.test
# library(BSDA)
})
options(digits = 4)
set.seed(123)
# Vector objetivo (bajo H0)
mu0 <- c(40, 80, 200, 160, 1.20)
names(mu0) <- c("alcohol_pct","metanol_mgL","alcoholes_sup_mgL","esteres_mgL","acidez_gL")
# Desv. estándar y correlaciones
sd <- c(1.0, 35, 80, 50, 0.35)
R  <- matrix(c(
1.00, -0.10,  0.20,  0.25, -0.15,
-0.10,  1.00,  0.05, -0.10,  0.30,
0.20,  0.05,  1.00,  0.45,  0.10,
0.25, -0.10,  0.45,  1.00,  0.05,
-0.15,  0.30,  0.10,  0.05,  1.00
), nrow=5, byrow=TRUE)
D <- diag(sd)
Sigma_known <- D %*% R %*% D   # Σ conocida
# Muestra simulada
n <- 70
mu_true <- mu0         # para NO forzar rechazo
datos <- as.data.frame(MASS::mvrnorm(n, mu=mu_true, Sigma=Sigma_known))
names(datos) <- names(mu0)
head(datos)
summary(datos)
summarytools::descr(datos)
# Matriz de dispersión base
pairs(datos, main = "Matriz de dispersión (pares)")
# Histogramas base
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
hist(datos[[j]], main = paste("Hist:", names(datos)[j]), xlab = names(datos)[j], col="gray")
}
par(op)
library(corrplot)
# Boxplots para cada variable
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
boxplot(datos[[j]], main=paste("Boxplot:", names(datos)[j]), col="lightblue")
}
par(op)
# Matriz de correlaciones (visual)
corrplot(cor(datos), method = "ellipse", tl.cex = 0.8)
# Curvas de densidad
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
plot(density(datos[[j]]), main=paste("Densidad:", names(datos)[j]), col="blue", lwd=2)
}
par(op)
# Univariado (Shapiro) y Lilliefors (nortest)
ap_shapiro <- apply(datos, 2, shapiro.test)
ap_lillie  <- apply(datos, 2, function(x) nortest::lillie.test(x))
# Mostrar p-valores de forma compacta
cat("Shapiro univariado (p-valores):\n")
print(sapply(ap_shapiro, `[[`, "p.value"))
cat("\nLilliefors univariado (p-valores):\n")
print(sapply(ap_lillie, `[[`, "p.value"))
# Multivariado (mshapiro)
p_mvn <- tryCatch(mvnormtest::mshapiro.test(t(as.matrix(datos)))$p.value, error=function(e) NA_real_)
cat("\nShapiro multivariado p-value:", p_mvn, "\n")
# Outliers por Mahalanobis (97.5%)
d2  <- mahalanobis(datos, colMeans(datos), cov(datos))
cut <- qchisq(0.975, df = ncol(datos))
idx_out <- which(d2 > cut)
cat("\nÍndices potencialmente atípicos:", ifelse(length(idx_out)==0,"(ninguno)", paste(idx_out, collapse=", ")), "\n")
plot(d2, main="Distancias de Mahalanobis", ylab="d²", pch=19)
abline(h=cut, col="red", lwd=2, lty=2)
text(idx_out, d2[idx_out], labels=idx_out, pos=3, col="red")
# Parámetros
p <- ncol(datos)                       # número de variables
mu <- mu0                              # vector de medias bajo H0
sigma <- Sigma_known                   # matriz Σ conocida
# Media muestral
media_muestral <- colMeans(datos)
# Estadístico Z^2 (equivalente a n*(xbar-mu)' Σ^{-1} (xbar-mu))
Z2 <- t(media_muestral - mu) %*% solve(sigma / n) %*% (media_muestral - mu)
# p-valor (chi-cuadrado con p g.l.)
p_valor <- 1 - pchisq(Z2, df = p)
# Resultados y decisión (α=0.05)
cat("\nEstadística Z^2:", as.numeric(Z2), "\n")
cat("p-valor:", as.numeric(p_valor), "\n")
if (p_valor < 0.05) {
cat("Decisión: Rechazar H0 (el vector de medias difiere de μ0).\n")
} else {
cat("Decisión: No se rechaza H0 (no hay evidencia suficiente de diferencia).\n")
}
# Tamaño de efecto (distancia de Mahalanobis de medias)
d_M <- sqrt(as.numeric(Z2) / n)
cat("d_M (Mahalanobis de la media) =", round(d_M, 4), "\n")
resultados <- data.frame(
Estadistico_Z2 = round(as.numeric(Z2), 4),
gl = p,
p_valor = round(as.numeric(p_valor), 4),
Decision = ifelse(p_valor < 0.05, "Rechazar H0", "No Rechazar H0"),
d_Mahalanobis = round(d_M, 4)
)
knitr::kable(resultados, caption = "Resultados de la prueba Z² con Σ conocida")
suppressPackageStartupMessages({
library(MASS)          # mvrnorm
library(summarytools)  # descr
library(nortest)       # lillie.test
library(mvnormtest)    # mshapiro.test
# library(BSDA)
})
options(digits = 4)
set.seed(123)
# Vector objetivo (bajo H0)
mu0 <- c(40, 80, 200, 160, 1.20)
names(mu0) <- c("alcohol_pct","metanol_mgL","alcoholes_sup_mgL","esteres_mgL","acidez_gL")
# Desv. estándar y correlaciones
sd <- c(1.0, 35, 70, 50, 0.35)
R  <- matrix(c(
1.00, -0.10,  0.20,  0.25, -0.15,
-0.10,  1.00,  0.05, -0.10,  0.30,
0.20,  0.05,  1.00,  0.45,  0.10,
0.25, -0.10,  0.45,  1.00,  0.05,
-0.15,  0.30,  0.10,  0.05,  1.00
), nrow=5, byrow=TRUE)
D <- diag(sd)
Sigma_known <- D %*% R %*% D   # Σ conocida
# Muestra simulada
n <- 70
mu_true <- mu0         # para NO forzar rechazo
datos <- as.data.frame(MASS::mvrnorm(n, mu=mu_true, Sigma=Sigma_known))
names(datos) <- names(mu0)
head(datos)
summary(datos)
summarytools::descr(datos)
# Matriz de dispersión base
pairs(datos, main = "Matriz de dispersión (pares)")
# Histogramas base
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
hist(datos[[j]], main = paste("Hist:", names(datos)[j]), xlab = names(datos)[j], col="gray")
}
par(op)
library(corrplot)
# Boxplots para cada variable
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
boxplot(datos[[j]], main=paste("Boxplot:", names(datos)[j]), col="lightblue")
}
par(op)
# Matriz de correlaciones (visual)
corrplot(cor(datos), method = "ellipse", tl.cex = 0.8)
# Curvas de densidad
op <- par(mfrow=c(2,3))
for (j in 1:ncol(datos)) {
plot(density(datos[[j]]), main=paste("Densidad:", names(datos)[j]), col="blue", lwd=2)
}
par(op)
# Univariado (Shapiro) y Lilliefors (nortest)
ap_shapiro <- apply(datos, 2, shapiro.test)
ap_lillie  <- apply(datos, 2, function(x) nortest::lillie.test(x))
# Mostrar p-valores de forma compacta
cat("Shapiro univariado (p-valores):\n")
print(sapply(ap_shapiro, `[[`, "p.value"))
cat("\nLilliefors univariado (p-valores):\n")
print(sapply(ap_lillie, `[[`, "p.value"))
# Multivariado (mshapiro)
p_mvn <- tryCatch(mvnormtest::mshapiro.test(t(as.matrix(datos)))$p.value, error=function(e) NA_real_)
cat("\nShapiro multivariado p-value:", p_mvn, "\n")
# Outliers por Mahalanobis (97.5%)
d2  <- mahalanobis(datos, colMeans(datos), cov(datos))
cut <- qchisq(0.975, df = ncol(datos))
idx_out <- which(d2 > cut)
cat("\nÍndices potencialmente atípicos:", ifelse(length(idx_out)==0,"(ninguno)", paste(idx_out, collapse=", ")), "\n")
plot(d2, main="Distancias de Mahalanobis", ylab="d²", pch=19)
abline(h=cut, col="red", lwd=2, lty=2)
text(idx_out, d2[idx_out], labels=idx_out, pos=3, col="red")
# Parámetros
p <- ncol(datos)                       # número de variables
mu <- mu0                              # vector de medias bajo H0
sigma <- Sigma_known                   # matriz Σ conocida
# Media muestral
media_muestral <- colMeans(datos)
# Estadístico Z^2 (equivalente a n*(xbar-mu)' Σ^{-1} (xbar-mu))
Z2 <- t(media_muestral - mu) %*% solve(sigma / n) %*% (media_muestral - mu)
# p-valor (chi-cuadrado con p g.l.)
p_valor <- 1 - pchisq(Z2, df = p)
# Resultados y decisión (α=0.05)
cat("\nEstadística Z^2:", as.numeric(Z2), "\n")
cat("p-valor:", as.numeric(p_valor), "\n")
if (p_valor < 0.05) {
cat("Decisión: Rechazar H0 (el vector de medias difiere de μ0).\n")
} else {
cat("Decisión: No se rechaza H0 (no hay evidencia suficiente de diferencia).\n")
}
# Tamaño de efecto (distancia de Mahalanobis de medias)
d_M <- sqrt(as.numeric(Z2) / n)
cat("d_M (Mahalanobis de la media) =", round(d_M, 4), "\n")
resultados <- data.frame(
Estadistico_Z2 = round(as.numeric(Z2), 4),
gl = p,
p_valor = round(as.numeric(p_valor), 4),
Decision = ifelse(p_valor < 0.05, "Rechazar H0", "No Rechazar H0"),
d_Mahalanobis = round(d_M, 4)
)
knitr::kable(resultados, caption = "Resultados de la prueba Z² con Σ conocida")
install.packages("MASS")
install.packages("summarytools")
install.packages("nortest")
install.packages("mvnormtest")
